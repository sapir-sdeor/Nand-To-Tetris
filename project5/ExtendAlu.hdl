// This file is part of nand2tetris, as taught in The Hebrew University,
// and was written by Aviv Yaish, and is published under the Creative 
// Common Attribution-NonCommercial-ShareAlike 3.0 Unported License 
// https://creativecommons.org/licenses/by-nc-sa/3.0/

// The inputs of the extended ALU are instruction[9], x[16], y[16].
// The output is defined as follows:
// If instruction[7..8] == 1, 1, the output is the same as the regular ALU,
// where instruction[5]=zx, instruction[4]=nx, ..., instruction[0]=no.
// If instruction[8] == 0, the output will be a shift of the input:
// - If instruction[4] == 0, the input "y" will be shifted, otherwise "x", 
// - If instruction[5] == 0, the shift will be a right-shift, otherwise left.

CHIP ExtendAlu {
	IN x[16], y[16], instruction[9];
	OUT out[16], zr, ng;
     
	PARTS:
	ShiftLeft(in=x, out=slx);
	ShiftLeft(in=y, out=sly);

	ShiftRight(in=x, out=srx);
	ShiftRight(in=y, out=sry);

	Mux16 (a=srx, b=slx, sel=instruction[5], out=sx);
	Mux16 (a=sry, b=sly, sel=instruction[5], out=sy);

	ALU (x=x, y=y, zx=instruction[5], nx=instruction[4], zy=instruction[3], ny=instruction[2], f=instruction[1], no=instruction[0], out=regularout, zr=zr1, ng=ng1);
	
     Mux16 (a=sy, b=sx, sel=instruction[4], out[15]=part1, out[8..14]=part2, out[0..7]=part3);
	Or8Way (in[0]=part1, in[1..7]=part2, out=o1);
	Or8Way (in=part3, out=o2);
	Or (a=o1, b=o2, out=o);
	Not (in=o, out=szr);
	Mux (a=false, b=true, sel=part1, out=sng);
	
     Mux16 (a[15]=part1, a[8..14]=part2, a[0..7]=part3, b=regularout, sel=instruction[8], out=out);
     Mux(a=szr, b=zr1, sel=instruction[8], out=zr);
     Mux(a=sng, b=ng1, sel=instruction[8], out=ng);
}