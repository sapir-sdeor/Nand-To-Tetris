// This file is part of nand2tetris, as taught in The Hebrew University,
// and was written by Aviv Yaish, and is published under the Creative 
// Common Attribution-NonCommercial-ShareAlike 3.0 Unported License 
// https://creativecommons.org/licenses/by-nc-sa/3.0/

// This chip is an extension of the regular CPU that uses the extended ALU.
// If instruction[15]==0 or (instruction[14] and instruction[13] equals 1)
// the CpuMul behave exactly as the same as the regular CPU.
// If the instruction is a c-instruction and instruction[14] == 0, the chip will 
// behave as follows:
//  Instruction  | 12 | 11 | 10 |
// ______________________________
// dest=D<<;jump | 0  | 1  | 1  |
// dest=A<<;jump | 0  | 1  | 0  |
// dest=M<<;jump | 1  | 1  | 0  |
// dest=D>>;jump | 0  | 0  | 1  |
// dest=A>>;jump | 0  | 0  | 0  |
// dest=M>>;jump | 1  | 0  | 0  |

CHIP CpuMul {
    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to re-start the current
                         // program (reset=1) or continue executing
                         // the current program (reset=0).
    OUT outM[16],        // M value output
        writeM,          // Write into M? 
        addressM[15],    // Address in data memory (of M)
        pc[15];          // address of next instruction
    
    PARTS:

    Mux16 (a=instruction, b=outALU, sel=instruction[15] , out=out1);
    Not (in=instruction[15], out=notinst15);
    Or (a=instruction[5], b=notinst15, out=loada);
    ARegister (in=out1, load=loada, out=outa, out[0..14]=addressM);
    And(a=instruction[15], b=instruction[4], out=loadd);
    DRegister (in=outALU, load=loadd, out=outd);
    Mux16 (a=outa, b=inM, sel=instruction[12] , out=out2);
    ExtendAlu (x=outd, y=out2, instruction=instruction[6..14], out=outM, out=outALU , zr=zr , ng=ng );
    Mux (a=false, b=true, sel=instruction[3], out=write);
    Mux (a=false, b=write, sel=instruction[15], out=writeM);
    
    And (a=instruction[1], b=zr, out=equal);
    And (a=instruction[2], b=ng, out=smaller);
    Or (a=ng, b=zr, out=notbigger);
    Not (in=notbigger, out=big);
    And (a=instruction[0], b=big, out=bigger);
    Or (a=equal, b=smaller, out=or1);
    Or (a=bigger, b=or1, out=outg);
    
    Or (a=instruction[2], b=instruction[1], out=inc1);
    Or (a=instruction[0], b=inc1, out=inc2);
    And (a=outg, b=inc2, out=inc3);
    Not (in=inc3, out=inc4);

    Mux (a=false, b=outg, sel=instruction[15], out=load);
    Mux (a=true, b=inc4, sel=instruction[15], out=inc);

    PC (in=outa , load=load , inc=inc , reset=reset , out[0..14]=pc);
}
