// This file is part of nand2tetris, as taught in The Hebrew University,
// and was written by Aviv Yaish, and is published under the Creative 
// Common Attribution-NonCommercial-ShareAlike 3.0 Unported License 
// https://creativecommons.org/licenses/by-nc-sa/3.0/
// It is an extension to the specifications given in  
// https://www.nand2tetris.org (Shimon Schocken and Noam Nisan, 2017)
// as allowed by the Creative Common Attribution-NonCommercial-ShareAlike 3.0 
// File name: projects/12/Keyboard.jack

/**
 * A library for handling user input from the keyboard.
 */
class Keyboard {

    /** Initializes the keyboard. */
    function void init() {
      return;
    } 

    /**
     * Returns the character of the currently pressed key on the keyboard;
     * if no key is currently pressed, returns 0.
     *
     * Recognizes all ASCII characters, as well as the following keys:
     * new line = 128 = String.newline()
     * backspace = 129 = String.backspace()
     * left arrow = 130
     * up arrow = 131
     * right arrow = 132
     * down arrow = 133
     * home = 134
     * End = 135
     * page up = 136
     * page down = 137
     * insert = 138
     * delete = 139
     * ESC = 140
     * F1 - F12 = 141 - 152
     */
    function char keyPressed() {
      if (~(Memory.peek(24576) = 0)) {
        return Memory.peek(24576);
      }
      return 0;
    }

    /**								
     * Waits until a key is pressed on the keyboard and released,
     * then echoes the key to the screen, and returns the character 
     * of the pressed key.
     */
    function char readChar() {
      var char key;
      do Output.printChar(0);
      let key = Keyboard.keyPressed();
      while (key = 0){
        let key = Keyboard.keyPressed();
      }
      while (key = Keyboard.keyPressed()){}
      do Output.backSpace();
      if (key = String.newLine()) {
        do Output.println();
        return key;
      }
      if (key = String.backSpace()) {
        do Output.backSpace();
        return key;
      }
      do Output.printChar(key);
      return key;
    }

    /**								
     * Displays the message on the screen, reads from the keyboard the entered
     * text until a newline character is detected, echoes the text to the screen,
     * and returns its value. Also handles user backspaces.
     */
    function String readLine(String message) {
		// You can assume input is at most 64 characters long.
		// Why? Because this is the width of our screen!
      var char c;
      var String s;
      let s = String.new(64);

      do Output.printString(message);

      let c = Keyboard.readChar();
      while (~(c = String.newLine())) {
        if (c = String.backSpace()) {
          do s.eraseLastChar();
        }
        else {
          let s = s.appendChar(c);
        }
        let c = Keyboard.readChar();
      }
      return s;
    }   

    /**								
     * Displays the message on the screen, reads from the keyboard the entered
     * text until a newline character is detected, echoes the text to the screen,
     * and returns its integer value (until the first non-digit character in the
     * entered text is detected). Also handles user backspaces. 
     */
    function int readInt(String message) {
      var String str;
      var int number;
      let str = Keyboard.readLine(message);
      let number = str.intValue();
      return number;
    }
}
