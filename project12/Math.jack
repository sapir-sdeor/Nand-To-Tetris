// This file is part of nand2tetris, as taught in The Hebrew University,
// and was written by Aviv Yaish, and is published under the Creative 
// Common Attribution-NonCommercial-ShareAlike 3.0 Unported License 
// https://creativecommons.org/licenses/by-nc-sa/3.0/
// It is an extension to the specifications given in  
// https://www.nand2tetris.org (Shimon Schocken and Noam Nisan, 2017)
// as allowed by the Creative Common Attribution-NonCommercial-ShareAlike 3.0 
// File name: projects/12/Math.jack

/**
 * A library of commonly used mathematical functions.
 * Note: Jack compilers implement multiplication and division using OS method calls.
 */
class Math {
    static Array bits; 
    static int qdivide;

    /** Initializes the library. */
    function void init() {
      var int i;
      let i = 1;
      let bits = Array.new(16);
      let bits[0] = 1;
      while (i < 16) {
        let bits[i] = bits[i-1] + bits[i-1];
        let i = i + 1;
      }
      return;
    }

    /** Returns the absolute value of x. */
    function int abs(int x) {
      if (x < 0) {
        return -x;
      }
      return x;
    }

    /** Returns the product of x and y. 
     *  When a Jack compiler detects the multiplication operator '*' in the 
     *  program's code, it handles it by invoking this method. In other words,
     *  the Jack expressions x*y and multiply(x,y) return the same value.
     */
    function int multiply(int x, int y) {
      var int sum;
      var int shiftedX;
      var int i;
      let sum = 0;
      let shiftedX = x;
      let i = 0;
      while (i < 17) {
        if (Math.bit(y, i)) {
          let sum = sum + shiftedX;
        }
        let shiftedX = ^shiftedX;
        let i = i + 1;
      }
      return sum;
    }

    /** Returns true if the i'th bit of x is 1, otherwise returns false.
    */
    function boolean bit(int x, int i) {
      var int num;
      let num = x & bits[i];
      return (~(num = 0));
    }

    /** Returns the integer part of x/y.
     *  When a Jack compiler detects the multiplication operator '/' in the 
     *  program's code, it handles it by invoking this method. In other words,
     *  the Jack expressions x/y and divide(x,y) return the same value.
     */
    function int divide(int x, int y) {
      var int q, x1, y1;
      let x1 = Math.abs(x);
      let y1 = Math.abs(y);
      if ((y1 > x1) | (y < 0)) {
        let qdivide = 0;
        return 0;
      }
      let q = Math.divide(x1, y1+y1);
      if (Math.bit(q, 0)) {
        let qdivide = qdivide + y1;
      }
      
      if ((x1- (qdivide + qdivide)) < y1) {
        if (((x<0) & (y>0)) | ((x>0) & (y<0))) {
          return -(q + q);
        }
        return q+q;
      }
      if (((x<0) & (y>0)) | ((x>0) & (y<0))) {
          return -(q + q) + 1;
        }
      return q+q+1;
    }

    /** Returns the integer part of the square root of x. */
    function int sqrt(int x) {
      var int y, z;
      var int i;
      let y = 0;
      let i = 7;
      while (~(i < 0)) {
        let z = y + bits[i];
        if (((z*z) < x) | ((z*z) = x)) {
          if ((z*z) > 0) {
            let y = z;
          }
        }
        let i = i - 1;
      }
      return y;
    }

    /** Returns the greater number. */
    function int max(int a, int b) {
      if (a < b) {
        return b;
      }
      return a;
    }

    /** Returns the smaller number. */
    function int min(int a, int b) {
      if (a > b) {
        return b;
      }
      return a;
    }
}
